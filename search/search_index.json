{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cortex CLI (corcli) documentation","text":"<p>Cortex is a Powerful Observable Analysis and Active Response Engine. While it is usually used along with TheHive Project, why not using it on a daily basis in a CLI fashion.</p> <p><code>corcli</code> was built in Python for this specific purpose.</p> <p>Documentation: https://0xFustang.github.io/corcli-docs</p> <p>Source Code: https://github.com/0xFustang/corcli</p>"},{"location":"#features","title":"Features","text":"<p>Key features are:</p> <ul> <li>Fast job submission: Submit one or multiple observables to Cortex with a different set of analyzers</li> <li>Bulk submission: Submit multiple observables from a text file</li> <li>Extract artifacts: Display only the extracted artifacts (.e.g IOCs)</li> <li>Download files: Download extraced files when available</li> <li>Use aliases for analyzers: Map your own aliases to launch your favorite analyzers</li> <li>Define alias presets: Define analysers presets that will call a group of analysers</li> <li>Multi instance config: Submit your jobs to another Cortex instance</li> </ul>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#with-pip-recommended","title":"with pip recommended","text":"<p><code>corcli</code> is published as a Python package and can be installed with <code>pip</code>, ideally by using a virtual environment. <code>corcli</code> uses python-magic and require the installation of libmagic.</p> <ol> <li>Install libmagic:</li> </ol> Debian/UbuntuRHEL/CentOS/RockyLinuxOSX with brewOSX with macportsWindows <pre><code>sudo apt-get install libmagic1\n</code></pre> <pre><code>sudo yum install libmagic\n</code></pre> <pre><code>brew install libmagic\n</code></pre> <pre><code>port install file\n</code></pre> <pre><code>pip install python-magic-bin\n</code></pre> <ol> <li>Open up a terminal and install corcli with:</li> </ol> Latest1.x <pre><code>pip install corcli\n</code></pre> <pre><code>pip install corcli==\"1.*\"\n</code></pre> <p>It will automatically install all dependencies: inquirer, cortex4py, colorama and toml.</p>"},{"location":"getting-started/#using-docker","title":"using Docker","text":"<p>A docker image is available from the repository and comes with all dependencies pre-installed. Open up a terminal and pull the image with:</p> Latest1.x <pre><code>docker pull ghcr.io/0xfustang/corcli:1.1.0\n</code></pre> <pre><code>docker pull ghcr.io/0xfustang/corcli:1.x\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p><code>corcli</code> can use a configuration file containing information about the Cortex instances and aliases. Feel free to use the example below or the one from the code repository. Just copy the <code>.example</code> file into <code>myconfigfile.toml</code> to get started.</p> <p>You can name a group of analyzers to call. In the configuration file below, I set the group <code>malware</code> to call three analysers that I regularly use.</p> <pre><code>title = \"cortex-cli configuration file\"\n\n[cortex-instance]\n\n[cortex-instance.default]\nurl = \"https://cortex.local\"\nverify_cert = true\n\nhashlookup = 'CIRCLHashlookup_1_1'\nurlhaus = 'URLhaus_2_0'\nmalbazaar = 'MalwareBazaar_1_0'\neml = 'EmlParser_2_1'\nvt = 'VirusTotal_GetReport_3_1'\ndoh = 'GoogleDNS_resolve_1_0_0'\nmisp = 'MISP_2_1'\nocti = 'OpenCTI_SearchObservables_2_0'\n\nmalware = ['CIRCLHashlookup_1_1', 'MalwareBazaar_1_0', 'VirusTotal_GetReport_3_1']\n\n[cortex-instance.dev]\nurl = \"https://cortex-dev.local\"\nverify_cert = false\n\nocti = 'OpenCTI_SearchObservables_2_0'\n\n[cortex-instance.ext]\nurl = \"https://cortex-ext.local/\"\nverify_cert = true\n</code></pre> Note <p><code>corcli</code> uses TOML configuration file.</p> Warning <p>Do not change <code>cortex-instance.default</code>, <code>corcli</code> won't be able to read the default instance config</p> <p>Now that you have a configuration file, use the option <code>-cf</code> or <code>--config-file</code>.</p>"},{"location":"getting-started/#api-key","title":"API key","text":"<p><code>corcli</code> can use the environment variables for the API key to provide or just use the <code>-k</code> or <code>--api-key</code> argument. If none of these options are used, you will be prompted to add the API key.</p> Using the environment variablesUsing argument <pre><code>export CORTEX_CLI_API=\"API_KEY\"\ncorcli -cf ~/corcli_config/corcli.toml -d google.com\n</code></pre> <pre><code>corcli -cf ~/corcli_config/corcli.toml -k API_KEY -d google.com\n</code></pre>"},{"location":"getting-started/#submit-your-first-job","title":"Submit your first job","text":"<p>To submit a job to Cortex use the following:</p> With a configuration fileWithout a configuration fileDocker with a configuration fileDocker without a configuration file <pre><code>corcli -cf ~/corcli_config/corcli.toml -d google.com\n</code></pre> <pre><code>corcli -u https://cortex.afterlife.local -d google.com\n</code></pre> <pre><code>docker run -ti -e CORTEX_CLI_API=$CORTEX_CLI_API --rm -v $CONFIG_PATH:/app/config/ -v $(pwd):/app/ ghcr.io/0xfustang/corcli:1.1.0 corcli -cf config/corcli.toml -d google.com\n</code></pre> <pre><code>docker run -ti -e CORTEX_CLI_API=$CORTEX_CLI_API --rm -v $(pwd):/app/ ghcr.io/0xfustang/corcli:1.1.0 corcli -c https://cortex.local -d google.com\n</code></pre> <p>You will find more use cases in the Usage page.</p>"},{"location":"getting-started/#tips","title":"Tips","text":""},{"location":"getting-started/#corcli-aliases","title":"<code>corcli</code> aliases","text":"<p>Take advantage of the aliases for your favorites analyzers by configuring your configuration file, otherwise <code>corcli</code> will prompt you to select one of the enabled Cortex's analyzers.</p> Note <p>If the analysers present in your configuration file gets updated you will need to manually apply the changes.</p> One analyzersMultiple analyzers <pre><code>corcli -cf ~/corcli_config/corcli.toml -d google.com -a eml\n</code></pre> <pre><code>corcli -u https://cortex.afterlife.local -d google.com -a eml -a hashlookup -a doh\n</code></pre>"},{"location":"getting-started/#sh-alias","title":"sh alias","text":"<p>You can set a bash or zsh alias to call <code>corcli</code> with your regular configuration file. </p> Python virtual environmentDocker <pre><code>alias corcli='source /path/to/your_virtual_env/bin/activate &amp;&amp; python -m corcli -cf ~/corcli_configs/corcli.toml'\n</code></pre> <pre><code>alias corcli='docker run -ti -e CORTEX_CLI_API=$CORTEX_CLI_API --rm -v $CONFIG_PATH:/app/config/ -v $(pwd):/app/ ghcr.io/0xfustang/corcli:1.1.0 corcli -cf config/corcli.toml'\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>This page describes the various features of this project.</p>"},{"location":"usage/#run-analysis-with-one-observable","title":"Run analysis with one observable","text":"domainurliphashmailfile <pre><code>corcli -d google.com\n</code></pre> <pre><code>corcli -u https://google.com\n</code></pre> <pre><code>corcli -i 1.1.1.1\n</code></pre> <pre><code>corcli -ha 8ED4B4ED952526D89899E723F3488DE4\n</code></pre> <pre><code>corcli -m samurai@arasaka.io\n</code></pre> <pre><code>corcli -f ~/case78/suspicious.eml\n</code></pre> Information <ul> <li>The observables will be submitted as TLP:AMBER and PAP:AMBER by default.</li> <li>You can select one or more analysers using the selector or the aliases.</li> </ul> <p><code>corcli</code> will display by default the summary reports of the jobs:</p> <pre><code>$ corcli -cf corcli.toml -d google.com -a doh\nAnalysis in progress for google.com ....\n---\nResult for analyzer GoogleDNS_resolve_1_0_0:\n\n- info / GoogleDNS:RecordsCount=\"30\"\n</code></pre> Warning <p>Do not be fooled if the summary is empty for some analysers. For instance, the <code>URLhaus_2_0</code> analyser does not provide a summary report when a hit is positive but instead use -e option to extract the observables.</p>"},{"location":"usage/#run-analysis-with-multiple-observables-bulk","title":"Run analysis with multiple observables (bulk)","text":"<p>The bulk feature has the ability to submit to Cortex all observables contained in a file line by line. For instance, the hashes contained in <code>hash.txt</code> will be checked against CIRCL's hashlookup and VirusTotal.</p> Using analysers selectorUsing aliases <pre><code>corcli -b hash.txt\n</code></pre> <pre><code>corcli -b hash.txt -a hashlookup -a vt\n</code></pre>"},{"location":"usage/#display-extracted-artifacts","title":"Display extracted artifacts","text":"<p>Display only the result of the extracted artifacts. Simply use the option <code>-e</code>. For instance, you can list the URLs or domain names  extracted by <code>FileInfo</code> out of a malicious MS Office document.</p> Using a single observableUsing bulk feature <pre><code>corcli -f ~/eml/maldoc.xls -a fileinfo -e\n</code></pre> <pre><code>corcli -b hash.txt -a hashlookup -a vt -e\n</code></pre> Example <p>Output should be like:</p> <pre><code>$ corcli -cf corcli.toml -u &lt;URL&gt; -e\nNo alias selected. Going to selector...\n[?] Select one or multiple analysers: \n\u25ef GoogleSafebrowsing_2_0\n\u276f \u25c9 URLhaus_2_0\n\u25ef Urlscan_io_Search_0_1_1\n\nAnalysis in progress for &lt;URL&gt; ....\n---\nResult for analyzer URLhaus_2_0:\n\n- [hash]: fb8ae5afbca62ae62460f62e34b1ee5b\n- [url]: https://urlhaus-api.abuse.ch/v1/download/1c513007d30a3f3ab3afc3bcad825ddad14da7251de2d7df6b5ff627dd568ff9/\n- [hash]: 1c513007d30a3f3ab3afc3bcad825ddad14da7251de2d7df6b5ff627dd568ff9\n- [url]: https://urlhaus-api.abuse.ch/v1/download/be2ce0c619189917669d61d19e767702cf4c5e8da173a91a02342a2fe9958a9e/\n- [hash]: eac675648aa4f47ebc7ebec3b093699c\n- [url]: https://urlhaus-api.abuse.ch/v1/download/d689433260877df317a4627388481fc391380ea7056805b0edc9d5f140333a65/\n- [hash]: d689433260877df317a4627388481fc391380ea7056805b0edc9d5f140333a65\n- [hash]: 27aa481dc427fee7f30c8632539a785f\n- [hash]: be2ce0c619189917669d61d19e767702cf4c5e8da173a91a02342a2fe9958a9e\n- [url]: https://urlhaus-api.abuse.ch/v1/download/723ab6d0ccf063714557018bc6f2b06bae854143599b23971b476ebc985d94b5/\n</code></pre>"},{"location":"usage/#download-a-file-attachment","title":"Download a file attachment","text":"<p>You can download files extracted by Cortex. Use the option <code>-df</code> to download an attachment for instance.</p> <pre><code>corcli -f ./suspicious.eml -e eml -df\n</code></pre> Information <ul> <li>The files will be dropped in the current file path.</li> <li>The files will be zip password-protected with <code>malware</code>.</li> </ul>"},{"location":"usage/#use-another-cortex-instance","title":"Use another Cortex instance","text":"<p>You can use another Cortex instance included in your configuration file or by entering the URL.</p> Using the config fileUsing option -c <pre><code>corcli -f ./suspicious.eml -e eml -ci dui\n</code></pre> <pre><code>corcli -d google.com -c https://pain.local\n</code></pre> Information <p>Using the option <code>-ci</code> we set precise the cortex instance name stated in the configuration file. For instance : [cortex-instance.dev]</p>"}]}